Start
	$(document).ready(function(){ 
	   // 开始写 jQuery 代码... 
	   // 防止文档加载之前运行jQuery代码
	});
	// 简写
	$(function(){

	});

选择器
	大体与CSS Selector相同，部分例外如下
		$('ul li:first') // 选取第一个ul的第一个li元素
		$('ul li:first-child') // 选取所有ul的第一个li元素
		$('*')  //选取所有元素
		$('[href]')  //选取所有带有href属性的元素
		$("a[target='_blank']")	  //选取所有 target 属性值等于 "_blank" 的 <a>元素，也可以用 ！=
		$(":button")	//选取所有 type="button" 的 <input> 元素 和 <button> 元素
		$("tr:even")	//选取偶数位置的 <tr> 元素	在线实例
		$("tr:odd")		//选取奇数位置的 <tr> 元素

事件
	与原生事件略微差别 
	事件类型如下：
		鼠标事件  click dbclick  mouseenter mouseleave hover mousedown mouseup ... //没有mouseover  mouseout
		键盘事件  keydown  keyup  keypress
		表单事件  change submit blur focus
		文档/窗口事件 load unload resize scroll

	hover事件不像mouseover/out，鼠标在元素内部子元素间移动不触发，
	hover事件接受两个函数参数，移入触发第一个，移出触发第二个，如果只给1个参数，则两个参数相同

	$('..').click()   //触发事件
	$('..').click(function(...)) //绑定事件，注意事件函数内部的this为原生元素

移动/动画
	显示隐藏
		$(selector).hide(speed,callback);  //内联设置元素display:none
			speed可选 slow fast  或者毫秒数值
		$(selector).show(speed,callback); //类似
		$(selector).toggle(speed,callback);  //切换hide 和show
			如果有多个元素，则callback执行多次
	淡入淡出
		$(selector).fadeIn/fadeOut/fadeTo/fadeToggle(speed,callback);
		fadeOut  //内联设置opacity，结束后删除opacity，设置display:none
		fadeIn   //取消display:none，内联设置opacity，最后删除opacity
		fadeTo(speed,opacity,callback); //speed，opacity必填
	滑动
		$(selector).slideDown/slideUp/slideToggle(speed,callback);
		slideUp  //慢慢减小元素的margin padding height 直至都为0，最后设置元素display:none
		slideDown //与slideUp相反，慢慢增加margin padding height，直至恢复原样
	动画
		$(selector).animate({params},speed,callback);
			params中属性的值可以设置为 show hide toggle(show/hide)
			使用驼峰属性名,如 margin-left --> marginLeft
			不支持颜色的动画，需使用扩展库
		animate队列功能
			如果连续有多个animate，则jQuery会创建一个队列，依次执行
	停止动画
		$(selector).stop(stopAll,goToEnd);
			stopAll 是否清除动画队列。默认false，即仅停止活动的动画，允许任何排入队列的动画向后执行。
			goToEnd 是否立即完成当前动画。默认false。

	jQuery支持链式编程
		$(selector).css().slideUp().......

HTML  DOM 操作
	属性
		$(selector).text/html/val/attr();
			text()  //返回或设置元素文本
			html()  //返回或设置元素innerHTML
			val()   //返回或设置表单元素的值
			attr()  //返回或设置元素的属性值，自定义的元素属性，用attr获取
			prop()  //元素的固有属性，使用prop获取，仅获取第一个元素的属性

			以上方法设置时，可以使用回调函数：
				$(selector).text(function(index,originText){});//index为当前元素在jQuery对象中的索引
	添加元素
		添加HTML内容
			append //元素内容末尾追加 ，元素内部
			prepend //元素内容头部插入，元素内部
			after  //元素之后，元素外部
			before //元素之前，元素外部
			参数可为三种类型：
				"text"
				$('<p>text</p>');
				document.createElement('p');p.innerHTML = 'text';
			也可以是这三种类型组成的list
	删除元素
		$(selector).remove()  //删除选中元素
		$(selector).empty()  //清空选中元素内部HTML
		$(selector).remove('.italic');//选择器--过滤参数，符合参数条件的才会被删除
	CSS
		addClass() // 'class1 class2'  参数中间可以空格
		removeClass()
		toggleClass()
		css()  //设置或返回css属性，
			设置为内联设置，返回的是计算后的，并不限于内联
			设置多个，使用对象参数 {backgroundColor:'#ccc',fontSize:'35px'}
	宽高
		width()   //content  width
		innerWidth()  //and padding
		outerWidth()  // and border
		outerWidth(true)  //and margin
		height 类似

遍历  DOM树节点上移动
	祖先
		$(selector).parent()  //返回每个元素的父元素
		$(selector).parents()  //返回每个元素的所有祖先元素，结果集不会有重复元素
		$(selector).parents("ul"); //返回每个元素的所有ul祖先元素
		$("span").parentsUntil("div"); //返回所有元素，介于span 和 div之间的祖先元素，不包括div
	后代
		$(selector).children();  //返回每个选中元素的所有 直接 子元素
		$(selector).children(selector1);  //返回每个选中元素的所有符合selector1的 直接 子元素
		$(selector).find(selector1);  //返回每个选中元素符合selector1的所有后代元素，* 则返回所有
	同胞
		siblings(); //返回每个选中元素的所有同胞元素
		siblings(selector); //返回每个选中元素的所有符合selector的同胞元素
		next();  //返回每个选中元素的下一个同胞元素
		nextAll(); //返回每个选中元素的所有后续同胞元素
		nextUntil(selector); // 返回每个选中元素的所有后续同胞元素，直至selector，不包含selector匹配
		prev(),prevAll(),prevUntil() 与 next...类似
	过滤  jQuery结果集操作，返回仍是jQuery结果集
		first/last()
		eq(index)  //选出指定位置的元素
		filter(selector); //不匹配selector的会被删除
		not(selector);   //匹配selector的会被删除

Ajax
	load
		$(selector).load(URL,data,callback);
			URL 异步请求的链接
			data 请求的查询字符串
			callback 请求完成后的回调
				function(responseTxt,statusTxt,xhr){}
					statusTxt:'success' | 'error'
			将请求获得的数据放入元素中，会替换原来的数据
		$(selector).load('url selector1');//只用符合selector1元的素数据替换，请求数据也为HTML结构
	get
		$.get(url,callback);
			callback --> function(data,status){...}
	post
		$.post(url,data,callback);
			data 提交的字符串，{name:'wlq',age:25,...}

noConflict
	若发生与其他框架、库命名冲突
	var jq = $.noConflict();  //使用jq作别名，也可以直接使用jQuery
	$.noConflict();
	jQuery(document).ready(function($){  //函数内部就可以使用$简写
	  $("button").click(function(){
	    $("p").text("jQuery 仍然在工作!");
	  });
	});

JSONP
	$.getJSON(url,function(data){
		
	});


