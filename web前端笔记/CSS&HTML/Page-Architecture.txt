CSS Reset
	清除标签的默认样式
	根据产品设置全局性样式定义
		如：
			设置input提示的样式
				:-moz-placeholder{color:#ccc !impottant;}
				::-moz-placeholder{color:#ccc !important;}
				:-ms-input-placeholder{color:#ccc !important;}
				::-webkit-input-placeholder{color:#ccc !important;}
			清除IE浏览器input内的清除键  x
				input::-ms-clear{display:none;}
			移动端按钮按下变灰，取消该效果
				html{-webkit-tap-highlight-color:rgba(0,0,0,0);}
	项目初期确定，写在link第一行

居中布局
	水平居中  宽度未知
		inline-block + text-align 兼容性好
			.parent{text-align:center;}
			.child{display:inline-block;}
		table + margin 仅设置一个元素就能居中，IE6 7不支持
			.child{
				display:table;  /*宽度为内容宽度*/
				margin：0 auto;
			}
		absolute + transform   IE6 7 8不兼容，高级浏览器也可能要私有前缀
			.parent{position:relative;}
			.child{
				position:absolute;
				left:50%;  /*相对容器*/
				transform:translateX(-50%);  /*相对自身*/
			}
		flex + justify-content   IE6 7 8不兼容
			.parent{
				display:flex;
				justify-content:center;  /*只需设置父元素*/
			}
			||
			.parent{
				display:flex;
			}
			.child{margin:0 auto;}

	垂直居中  高度未知
		table-cell + vertical-align IE6 7不兼容，但可换成表结构
			.parent{
				display:table-cell;
				vertical-align:middle;
			}
		absolute + transform IE6 7 8不兼容，高级浏览器也可能要私有前缀
			.parent{position:relative;}
			.child{
				position:absolute;
				top:50%;
				transform:translateY(-50%);
			}
		flex + align-items 只需要设置parent，低版本浏览器不兼容
			.parent{
				display:flex;
				align-items:center;  /*默认是stretch*/
			}

	居中水平垂直都居中，宽高未知
		inline-block + text-align + table-cell + vertical-align  IE6 7不兼容
			.parent{
				text-align:center;
				display:table-cell;
				vertical-align:middle;
			}
			.child{
				display:inline-block;
			}
		absolute + transform
			.parent{
				position:relative;
			}
			.child{
				position:absolute;
				top:50%;
				left:50%;
				transform:translate(-50%,-50%);
			}
		flex + justify-content + align-items
			.parent{
				display:flex;
				justify-content:center;
				align-items:middle;
			}
		加一个不可见元素 用inline-block
			格式
				.parent
					.sibling
					.child   /*它要水平垂直居中*/
			.parent{
				text-align:center;
			}
			.sibling,.child{
				display:inline-block;
				zoom:1;
				*display:inline;
				vertical-align:middle;
			}
			.sibling{
				height:100%;
				width:1px;
				line-height:100%;
				visibility:hidden;
			}

多列布局
	定宽+自适应
		float + margin
			.left{float:left;width:100px;}
			.right{margin-left:120px;}
			IE6会产生3px bug，解决.left{margin-right:-100px;}

			.right清除浮动  .right内容会相对.left内容换行，.right高度增加
		float + margin + (fix)  解决上述方案.right清除浮动的影响
			<div class="parent">
				<div class="left"></div>
				<div class="right-fix">
					<div class="right"></div>
				</div>
			</div>
			.left{float:left;width:100px;margin-right:-100px;}
			.right-fix{float:right;width:100%;margin-left:-100px;}
			.right{margin-left:120px;}
		float + overflow  IE6不支持
			.left{float:left;width:100px;margin-right:20px;}
			.right{overflow:hidden;} /* 触发BFC*/
		table
			.parent{
				display:table;
				width:100%;
				table-layout:fixed; /* 布局优先，若单元格宽度未设置，则默认平分*/
			}
			.left,.right{display:table-cell;}
			.left{
				width:100px;
				padding-right:20px;  /*无法设置外边距*/
				background-clip:content-box; /*默认为border-box，IE9+支持*/
			}
		flex 性能不佳，兼容性差
			.parent{display:flex;}
			.left{width:100px;margin-right:20px;}
			.right{flex:1;}    /*增长因子*/

	不定宽 + 自适应
		float + overflow  IE6不支持
			.left{float:left;margin-right:20px;}
			.right{overflow:hidden;} /* 触发BFC*/
		table
			.parent{
				display:table;
				width:100%;
				table-layout:fixed; /* 布局优先，若单元格宽度未设置，则默认平分*/
			}
			.left,.right{display:table-cell;}
			.left{
				padding-right:20px;  /*无法设置外边距*/
				background-clip:content-box; /*默认为border-box，IE9+支持*/
			}
		flex 性能不佳，兼容性差
			.parent{display:flex;}
			.left{margin-right:20px;}
			.right{flex:1;}    /*增长因子*/
	多列不定宽 + 自适应
		float + overflow  IE6不支持
			.left,.center{float:left;margin-right:20px;}
			.right{overflow:hidden;}
		flex
			.parent{display:flex;}
			.left,.center{margin-right:20px;}
			.right{flex:1;}

	等分布局
		float + -margin  要设置宽度，耦合性强
			div.parent>div.column*4  
			.parent{margin-left:-20px;} /*清除浮动*/
			.column{float:left;width:25%;padding-left:20px;box-sizing:border-box;}
		table
			div.parent-fix>div.parent>div.column * n
			.parent-fix{margin-left:-20px;}  /*.parent需要设置宽度100%，无法设置margin*/
			.parent{width:100%;display:table;table-layout:fixed;}  /* 布局优先，若单元格宽度未设置，则默认平分*/
			.column{display:table-cell;padding-left:20px;}
		flex
			div.parent>div.column*n
			.parent{display:flex;}
			.column{flex:1;}
			.column+.column{margin-left:20px;}

	等高布局
		table table布局自动等高
			div.parent>div.left+div.right
			.parent{display:table;width:100%;table-layout:fixed;}
			.left,.right{display:table-cell;}
			.left{padding-right:20px;width:100px;} 
		flex
			.parent{display:flex;} /*flex的align-items属性默认stretch，所以默认等高*/ 
			.left{margin-right:20px;width:150px;}
			.right{flex:1;}  
		float
			.left{float:left;width:100px;margin-right:20px;}
			.right{overflow:hidden;}
			.parent{overflow:hidden;}
			.left,.right{padding-bottom:9999px;margin-bottom:-9999px;}

	全屏布局
		position   IE6支持性差
			div.parent>div.header+div.left+div.right+div.bottom
			html,body,.parent{height:100%;overflow:hidden;}
			.header{
				position:absolute;
				top:0;
				left:0;
				right:0;
				height:100px;  /*10%*/
			}
			.left{
				position:absolute;
				top:100px; /*10%*/
				left:0;
				right:200px;  /*20%*/
				bottom:50px;   /*5%*/
			}
			.right{
				position:absolute;
				top:100px;  /*10%*/
				left:200px;  /*20%*/
				right:0;
				bottom:50px;  /*5%*/
				overflow:auto;
			}
			.bottom{
				position:absolute;
				left:0;
				right:0;
				bottom:0;
				height:50px;  /*5%*/
			}
		flex
			html,body,.parent{height:100%;overflow:hidden;}
			.parent{display:flex;align-items:column;}
			.head{height:100px;}
			.middle{
				display:flex;
				flex:1;
			}
			.left{
				width:200px;
			}
			.right{
				flex:1;
				overflow:auto;
			}
			.bottom{
				height:50px;
			}

响应式布局
	<meta name='viewport' content='
		width=device-width,  /*宽度为设备宽度*/
		initial-scale=1.0,   /*初始化缩放为1，不缩放*/
		user-scalable=no'/>  /*禁止用户缩放*/
	@media screen and (max-width:320px){
		/*CSS declaration here*/
		/*only effective when match the conditions*/
	}
	@media screen and (min-width:768px) and (max-width:1000px){
		/*CSS declaration here*/
	}

页面优化
	why
		提升网页响应速度
		对搜索引擎、屏幕阅读器友好
		提高代码可读性、可维护性
	how
		减少请求
			图片合并
				sprite图片精灵
			css文件合并
				少量css内联
				避免使用import方式载入css文件
					import方式会发起一起请求，并且是同步的，文件会一个一个加载
		减小文件大小
			减小图片大小
				选择合适的图片格式
			压缩图片
			CSS值缩写
			省略值为0的单位，小数省略前面的0
			颜色值最短表示
			CSS选择器合并
			文件压缩
		页面性能
			CSS文件放入head中
			JS放在body底部
			减少标签数量
			尽可能短的选择器长度
			避免耗性能的属性
				expression filter border-radius box-shadow gradients
			图片设置宽高，图片不要缩放
			所有表现用css实现，操作className
		可读性、可维护性
			规范，开发规范
			语义化
			尽量避免hack
			模块化
			注释

规范
	文件规范
		文件分类
			通用类 业务类
		文件引入
			不推荐内联  禁用@import
		文件本身
			文件名  文件编码
	注释规范
		块状注释
			同一缩进
			在被注释对象之上
		单行注释
			在被注释对象之上
			文字两端需空格，避免乱码
		行内注释
			文字两端需留空格
			在分号之后		
	命名规范
		分类命名
			布局类 g-
			模块类 m-
		命名格式
			大小写
			长度  兼顾考虑可读性
			语义化命名
				以内容语义命名
	书写规范
		单行与多行
		空格和分号
			缩进 2or4
			规则内空格是否需要   X
			分号  保留最后一个属性值的分号
		属性顺序
			根据重要性按顺序书写
				显示属性 display visibility position float clear list-style top
				自身属性 width height margin padding border overflow min-width
				文本属性和其他修饰 font text-align text-decoration vertical-align white-space color background
			Hack 方式
				IE6  _property  仅IE6能识别
				IE7  *property  仅IE7能识别
				不要滥用
			统一属性值
				color   #...
				url()   是否需要引号，双引号还是单引号
	其他 HTML、图片相关等
		HTML规范
			声明
				<!DOCTYPE html>
			闭合
				自闭合标签要不要 /
			属性 
				单双引号
				可省略的属性值要不要写  如readonly
			层级
				用缩进体现层级，提高可读性
				标签正确嵌套，但不宜太深
			HTML注释
				注释头尾
			大小写
				标签、属性均小写
		图片规范
			文件名称
				语义、长度
			保留源文件
			图片合并
				尽可能使用sprite
				按模块、业务、页面来划分，拼接

模块化
	模块
		一系列相关联的结构组成的整体
		带有一定语义，而非表现
	how
		模块分类命名 m-
		以一个主选择器开头，模块根节点
		使用以主选择器开头的后代选择器
		扩展
			加一个模块-1的类，做模块扩展
	why
		代码更清晰，可读性好，不会引起样式污染
		利于多人协同开发
		便于扩展和重用
		可读性、可维护性好
	
